.chapter(data-title='Setting Up The Application')
  .step(data-tile='What Are We Building?', data-file='app/controllers/surveys_controller.rb',
    data-highlight='13-36')
    :markdown
      ## Automated Survey

      Have you ever wondered how to create an automated survey that can be answered over phone or SMS?

      This tutorial will show how to do it using Twilio API.

      #### Here's how it works at a high level

      ![Automated Survey Diagram](https://s3.amazonaws.com/howtodocs/automated-survey.png)

      1. The end user calls or texts the survey's phone number.

      1. Twilio gets the call or text and makes an HTTP responding instructions request to your application.

      1. Your web application serves up [TwiML instructions](/docs/api/twiml) to `Gather` or `Record` the user input over the phone, or prompt for text input with `Message`.

      1. After each question, Twilio makes another request to your server with the user's input. Your application stores this input in its database.

      1. Your application returns a TwiML response to Twilio with instructions to either ask the next question or end the survey.

      ---
      **See Also:**
      * [Getting Started with Ruby on Rails](//guides.rubyonrails.org/getting_started.html)
      * [Getting started with Twilio Ruby](//www.twilio.com/docs/ruby/install)
      * [TwiML: the Twilio Markup Language](//www.twilio.com/docs/api/twiml).

  .step(data-tile='Create a survey', data-file='app/controllers/surveys_controller.rb')
    :markdown
      ## Creating a Survey

      For your convenience, the application's
      repository already includes one survey that can be loaded into
      the database. If the database is configured correctly this
      survey will be loaded into the database when the app starts.

      You can modify the questions from the survey by editing the
      [seeds.rb](//github.com/TwilioDevEd/automated-survey-rails/blob/master/db/seeds.rb)
      file located in the root of the repository and re-running the app.

      We want users to take our survey, so next we are going implement
      the handler for SMS and calls.

      ---
      **See Also**
      * [Migrations and Seed Data](//edgeguides.rubyonrails.org/active_record_migrations.html#migrations-and-seed-data)

   .step(data-tile='The Interview Loop')
    :markdown
      ## The Interview Loop

      It is helpful to visualize your interaction with a user during a survey as a loop.
      The chart below shows how that interaction will be handled. (click on it for enlargement):

      ![Survey Flow Chart](//s3.amazonaws.com/howtodocs/flowchart.png)

      The user can enter input for your survey over the phone using either their phone's keypad or by speaking.
      After each interaction, Twilio will make an HTTP request to your web application with either the string of
      keys the user pressed or a URL to a recording of their voice input.

      It's up to the application to process, store and respond to the user's input.

      Let's dive into this flow to see how it actually works.

  .step(data-title='Configuring a Twilio Number',
    data-file='app/controllers/surveys_controller.rb',
    data-highlight='8-17')
    :markdown
      ## Configuring a Twilio Number

      To initiate the interview process, we need to configure one of our [Twilio numbers][numbers]
      to send our web application an HTTP request when we get an incoming call or text.

      [Click on one of your numbers][numbers] and configure Voice and Message URLs that point to your server.
      In our code, the routes are `/surveys/voice` and `/surveys/sms`, respectively.

      ![Configuring a Twilio Number](//s3.amazonaws.com/howtodocs/number-config.png)

      [numbers]: /user/account/phone-numbers/incoming

  .step(data-title="Responding To the Twilio Request",
    data-file='app/controllers/surveys_controller.rb',
    data-highlight='8-11,21-26')
    :markdown
      ## Responding to the Twilio Request

      After receiveing a call or an SMS, Twilio will send a request to the
      URL specified on the number configuration:
      * `/surveys/voice` for calls.
      * `/surveys/sms` for SMS.

      Each of these endpoints will receive the request and will use `Twilio::TwiML::Response` to return
      a welcome message to the user. For callers, the constructed message will contain a `Say`
      verb. For requests coming from a text we'll respond with the `Message` Verb which will respond with an SMS.

      Our response will also include a `Redirect` verb to the question's enpoint in order to continue the survey flow.

      ---
      **See Also:**
      * [Twilio webhooks](https://www.twilio.com/platform/webhooks)
      * [TwiML Voice: Your Response](https://www.twilio.com/docs/api/twiml/your_response)
      * [TwiML Voice: <Say>](https://www.twilio.com/docs/api/twiml/say)
      * [TwiML Voice: <Redirect>](https://www.twilio.com/docs/api/twiml/redirect)

  .step(data-file='app/controllers/questions_controller.rb')
    :markdown
      ## Question Controller

      This controller is used for calls only. It produces the TwiML with the
      questions.

      The sequence of questions was modeled through the _action_ verb attribute.

      Let's see how we create the voice response.

      ---
      **See Also:**
      * [action: Gather attribute](//www.twilio.com/docs/api/twiml/gather#attributes-action)

  .step(data-file='lib/voice/create_response.rb')
    :markdown
      ## Creating the Voice Response

      If there is no question `Question::NoQuestion` we'll respond with an exit
      message.

      If the question is of kind "numeric" then we use the
      [`<Gather>`](https://www.twilio.com/docs/api/twiml/gather) verb.
      However, if we expect dialpad input we use the
      [`<Record>`](https://www.twilio.com/docs/api/twiml/record) verb. Both
      verbs take an `action` attribute and a `method` attribute.

      Twilio will use both attributes to define our response's endpoint that will
      be used as callback. That endpoint will be responsible to receive and
      store the caller's answer.

      During the Record verb creation, we also ask for a
      [Transcription](https://www.twilio.com/docs/api/rest/transcription).
      Twilio will process the record and extract useful text, making a request
      to our response's endpoint when transcription is done.

      Now let's see what to do with the response.

      ---
      **See Also:**
      * [TwiML Voice: <Gather>](//www.twilio.com/docs/api/twiml/gather)
      * [TwiML Voice: <Record>](//www.twilio.com/docs/api/twiml/record)

  .step(data-file='app/controllers/answers_controller.rb')
    :markdown
      ## Handling Responses

      When the user has finished responding, Twilio sends us a
      request telling us what happened and asking for further instructions on how to
      proceed.

      At this point, we need to recover data from Twilio's request parameters
      using the `create` method on `Answer`.

      Recovered parameters vary according to what we asked during the question, they can be:

      * `From` contains the caller's phone number.
      * `RecodingUrl` contains the URL for listening a recorded message.
      * `Digits` contains the keys pressed for a numeric question.
      * `CallSid` contains the unique identifier for the call.

      Finally we redirect to our Question controller, which will ask the next question on the loop.
      This is done on `Voice::CreateResponse.for` method.

      Now, let's see how to visualize the results.

      ---

      **See Also:**
      * [TwiML Voice: Your Response](//www.twilio.com/docs/api/twiml/your_response)

  .step(data-file='app/controllers/surveys_controller.rb',
    data-highlight='4-6')
    :markdown
      ## Displaying the Survey Results

      For this route we simply query the database using the [Active Record Query Interface](//guides.rubyonrails.org/active_record_querying.html).

      We display a [panel](http://getbootstrap.com/components/#panels) for every question on the last survey, and inside every
      panel we list the responses from different calls.

      You can access this page in the application's root route `/`.

  .step
    :markdown
      ## Where to Next?

      That's it!
      If you have configured one of your Twilio
      numbers to the application built in this tutorial you should be
      able to take the survey and see the results under the root route of
      the application. We hope you found this sample application
      useful.  If you're a Java developer working with Twilio, you
      might enjoy these other tutorials:

      ### [Appointment Reminders](//www.twilio.com/docs/tutorials/walkthrough/appointment-reminders/ruby/rails)
      Automate the process of reaching out to your customers in advance of an upcoming appointment.

      ### [Click to Call](//www.twilio.com/docs/tutorials/walkthrough/click-to-call/ruby/rails)
      Click-to-call enables your company to convert web traffic into phone calls with the click of a button.

      ### Did this help?
      Thanks for checking out this tutorial! If you have any feedback to share with us,
      we'd love to hear it. [Contact support](//www.twilio.com/help/contact) to let us know what you think.
